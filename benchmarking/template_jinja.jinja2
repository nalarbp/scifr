<!DOCTYPE html>
<html lang="en-AU">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jinja2 (Basic complexity - R1)</title>
    
    <!-- Embedded Tailwind CSS -->
    <script>{{ tailwind_lib|safe }}</script>
    
    <!-- Embedded DataTables CSS -->
    <style>{{ datatables_css_lib|safe }}</style>
    
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #fafafa;
        }
        .chart-container {
            height: 400px;
        }
    </style>
</head>
<body class="bg-gray-50">
    <div class="max-w-7xl mx-auto p-6 space-y-6">
        <h1 class="text-3xl font-bold text-left">Jinja2 (Basic complexity - R1)</h1>
        
        <!-- Country Metric Selector -->
        <div class="border border-gray-200 rounded-lg p-4 bg-white">
            <div id="countryMetricSelector"></div>
        </div>
        
        <!-- Chart -->
        <div class="border border-gray-200 rounded-lg p-4 bg-white min-h-[450px]">
            <div id="chartLoading" class="flex items-center justify-center h-96">
                <div class="text-gray-500">Loading chart...</div>
            </div>
            <div class="chart-container">
                <canvas id="lineChart" style="display: none;"></canvas>
            </div>
        </div>
        
        <!-- Table -->
        <div class="border border-gray-200 rounded-lg p-4 bg-white min-h-[750px]">
            <div id="tableLoading" class="flex items-center justify-center h-96">
                <div class="text-gray-500">Loading table...</div>
            </div>
            <div id="tableContainer" style="display: none;">
                <table id="dataTable" class="display" style="width:100%"></table>
            </div>
        </div>
    </div>

    <!-- Embedded jQuery -->
    <script>{{ jquery_lib|safe }}</script>
    
    <!-- Embedded Chart.js -->
    <script>{{ chart_js_lib|safe }}</script>
    
    <!-- Embedded DataTables -->
    <script>{{ datatables_js_lib|safe }}</script>

    <script>
        //raw data from template - handle the data_string variable
        let rawData;
        try {
            const dataFromTemplate = {{ data_string|tojson }};
            //if it's a string, parse it; if it's an object, use directly
            rawData = typeof dataFromTemplate === 'string' ? 
                JSON.parse(dataFromTemplate) : dataFromTemplate;
        } catch (e) {
            console.error('Failed to parse data:', e);
            rawData = null;
        }
        
        //global state
        let parsedData = [];
        let selectedCountry = 'World';
        let selectedMetric = 'new_cases_per_million_7_day_avg_right';
        let availableCountries = [];
        let availableMetrics = [];
        let chartInstance = null;
        let tableInstance = null;

        //parse flat JSON data
        function parseData(dataObj, rowSeparator = ';n', colSeparator = ';t') {
            if (!dataObj || typeof dataObj !== 'object') {
                throw new Error('dataObj must be a valid object');
            }
            
            const actualData = dataObj.data;
            if (!actualData || typeof actualData !== 'string') {
                throw new Error('data property must be a non-empty string');
            }
            
            const rows = actualData.split(rowSeparator);
            const validRows = rows.filter(row => row.trim().length > 0);
            
            if (validRows.length < 2) {
                throw new Error('data must contain at least header and one data row');
            }
            
            const header = validRows[0].split(colSeparator).map(col => col.trim());
            const parsedData = new Array(validRows.length - 1);
            
            for (let i = 1; i < validRows.length; i++) {
                const values = validRows[i].split(colSeparator);
                const rowObj = {};
                
                for (let j = 0; j < header.length; j++) {
                    const rawValue = values[j]?.trim() || '';
                    if (rawValue === '') {
                        rowObj[header[j]] = null;
                    } else {
                        const numValue = +rawValue;
                        rowObj[header[j]] = (numValue === numValue && isFinite(numValue)) ? numValue : rawValue;
                    }
                }
                parsedData[i - 1] = rowObj;
            }
            
            return parsedData;
        }

        //format metric names for display
        function formatMetricName(metric) {
            return metric
                .replace(/_/g, ' ')
                .replace(/\b\w/g, l => l.toUpperCase())
                .replace(/7 Day/g, '(7-day)')
                .replace(/Per Million/g, 'per Million');
        }

        //generate chart data
        function generateChartData(data, country, metric) {
            let filteredData = data.filter(row => row.country === country);
            
            if (filteredData.length === 0) {
                console.warn('No data found for country:', country);
                return [];
            }
            
            let chartData = filteredData
                .filter(row => row[metric] !== null && row[metric] !== undefined && !isNaN(row[metric]))
                .map(row => ({
                    x: row.date,
                    y: parseFloat(row[metric])
                }))
                .sort((a, b) => new Date(a.x) - new Date(b.x));
            
            return chartData;
        }

        //generate table data
        function generateTableData(data, country) {
            const filteredData = data.filter(row => row.country === country);
            const columns = Object.keys(data[0] || {}).map(key => ({
                data: key,
                title: formatMetricName(key)
            }));
            
            return { data: filteredData, columns };
        }

        //render country metric selector
        function renderCountryMetricSelector() {
            const container = document.getElementById('countryMetricSelector');
            
            container.innerHTML = `
                <div class="flex flex-col space-y-4">
                    <div class="flex flex-row gap-6 items-start">
                        <!-- Total data points -->
                        <div class="form-control">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Total data points</label>
                            <p class="text-center font-bold text-lg">${parsedData.length}</p>
                        </div>
                        
                        <!-- Country Selector -->
                        <div class="form-control">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Country</label>
                            <select id="countrySelect" class="border border-gray-300 rounded px-3 py-1 text-sm">
                                ${availableCountries.map(country => 
                                    `<option value="${country}" ${country === selectedCountry ? 'selected' : ''}>${country}</option>`
                                ).join('')}
                            </select>
                        </div>
                        
                        <!-- Metric Selector -->
                        <div class="form-control">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Metric</label>
                            <select id="metricSelect" class="border border-gray-300 rounded px-3 py-1 text-sm">
                                ${availableMetrics.map(metric => 
                                    `<option value="${metric}" ${metric === selectedMetric ? 'selected' : ''}>${formatMetricName(metric)}</option>`
                                ).join('')}
                            </select>
                        </div>
                        
                        <!-- Reset Button -->
                        <div class="pt-6">
                            <button id="resetBtn" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-1 rounded text-sm">
                                Reset
                            </button>
                        </div>
                    </div>
                    
                    <!-- Info -->
                    <div class="text-sm text-gray-600">
                        Showing chart and table of <span class="font-medium">${formatMetricName(selectedMetric)}</span> for <span class="font-medium">${selectedCountry}</span>
                    </div>
                </div>
            `;
            
            //bind events
            document.getElementById('countrySelect').addEventListener('change', (e) => {
                selectedCountry = e.target.value;
                updateComponents();
            });
            
            document.getElementById('metricSelect').addEventListener('change', (e) => {
                selectedMetric = e.target.value;
                updateComponents();
            });
            
            document.getElementById('resetBtn').addEventListener('click', () => {
                selectedCountry = 'World';
                selectedMetric = 'new_cases_per_million_7_day_avg_right';
                renderCountryMetricSelector();
                updateComponents();
            });
        }

        //render chart
        function renderChart() {            
            document.getElementById('chartLoading').style.display = 'flex';
            document.getElementById('lineChart').style.display = 'none';
            
            setTimeout(() => {
                try {
                    const chartData = generateChartData(parsedData, selectedCountry, selectedMetric);
                    
                    if (chartData.length === 0) {
                        //show message instead of empty chart
                        document.getElementById('chartLoading').innerHTML = 
                            '<div class="text-gray-500">No data available for selected country and metric</div>';
                        return;
                    }
                    
                    const canvas = document.getElementById('lineChart');
                    const ctx = canvas.getContext('2d');
                    
                    if (chartInstance) {
                        chartInstance.destroy();
                    }
                    
                    chartInstance = new Chart(ctx, {
                        type: 'line',
                        data: {
                            datasets: [{
                                label: formatMetricName(selectedMetric),
                                data: chartData,
                                borderColor: 'rgb(59, 130, 246)',
                                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                                pointRadius: 1,
                                pointHoverRadius: 4,
                                tension: 0.1,
                                fill: false
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: { 
                                    display: true, 
                                    position: 'top' 
                                }
                            },
                            scales: {
                                x: {
                                    type: 'category',
                                    title: {
                                        display: true,
                                        text: 'Date'
                                    },
                                    ticks: {
                                        maxTicksLimit: 10
                                    }
                                },
                                y: {
                                    type: 'linear',
                                    title: { 
                                        display: true, 
                                        text: formatMetricName(selectedMetric)
                                    }
                                }
                            }
                        }
                    });
                    
                    document.getElementById('chartLoading').style.display = 'none';
                    document.getElementById('lineChart').style.display = 'block';
                    
                } catch (error) {
                    console.error('Chart rendering error:', error);
                    document.getElementById('chartLoading').innerHTML = 
                        '<div class="text-red-500">Error loading chart: ' + error.message + '</div>';
                }
            }, 100);
        }

        //render table
        function renderTable() {
            document.getElementById('tableLoading').style.display = 'flex';
            document.getElementById('tableContainer').style.display = 'none';
            
            setTimeout(() => {
                const tableData = generateTableData(parsedData, selectedCountry);
                
                if (tableInstance) {
                    tableInstance.destroy();
                }
                
                tableInstance = new DataTable('#dataTable', {
                    data: tableData.data,
                    columns: tableData.columns.map(col => ({
                        ...col,
                        render: function(data, type, row) {
                            if (typeof data === 'number') {
                                return data !== null && data !== undefined ? parseFloat(data).toFixed(2) : 'N/A';
                            }
                            return data;
                        }
                    })),
                    pageLength: 15,
                    searching: true,
                    ordering: true,
                    responsive: true
                });
                
                document.getElementById('tableLoading').style.display = 'none';
                document.getElementById('tableContainer').style.display = 'block';
            }, 100);
        }

        //update components when selections change
        function updateComponents() {
            renderCountryMetricSelector();
            renderChart();
            renderTable();
        }

        //initialise app
        function init() {
            try {
                if (!rawData) {
                    throw new Error('No data received from template');
                }
                
                //parse data - pass object directly instead of string
                parsedData = parseData(rawData);

                //extract available options
                availableCountries = [...new Set(parsedData.map(row => row.country))].sort();
                
                //add 'World' if it exists in data, otherwise use first country
                if (!availableCountries.includes('World') && availableCountries.length > 0) {
                    selectedCountry = availableCountries[0];
                }
                
                availableMetrics = Object.keys(parsedData[0] || {}).filter(key => {
                    const sampleValue = parsedData[0][key];
                    return typeof sampleValue === 'number' && !isNaN(sampleValue);
                });
                
                //ensure selected metric exists
                if (!availableMetrics.includes(selectedMetric) && availableMetrics.length > 0) {
                    selectedMetric = availableMetrics[0];
                }
                
                //render components
                updateComponents();
                
            } catch (error) {
                console.error('Initialisation failed:', error);
                document.body.innerHTML = `
                    <div class="max-w-7xl mx-auto p-6">
                        <h1 class="text-3xl font-bold text-red-600">Error</h1>
                        <p class="text-red-500">${error.message}</p>
                    </div>
                `;
            }
        }

        //start when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', init);
        } else {
            init();
        }
    </script>
</body>
</html>